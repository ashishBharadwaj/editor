{"version":3,"sources":["components/md-editor/modules/constants.js","components/md-editor/modules/mdEditor.js","components/md-editor/index.js","App.js","index.js"],"names":["Constants","ContainerClassName","EditorContainerClassName","EditorTextAreaClassName","PriviewTextAreaClassName","ToolBarContainerClassName","ToolBarElementClassName","IconClassName","md","require","html","linkify","typographer","breaks","MdEditor","props","editorTextArea","React","createRef","state","editorText","previewText","toolBarConfig","name","iconName","markUpStart","markUpEnd","isSingleTaggedMarkup","customFormatter","input","toUpperCase","toLowerCase","isBlockedMarkup","editorTextChange","bind","handleToolBarElementClick","e","this","setState","target","value","render","config","selectionStartIndex","current","selectionStart","selectionEndIndex","selectionEnd","currentText","selectedText","substring","newEditorText","addRemoveMarkup","newPreviewText","text","newText","startsWith","length","endsWith","className","map","key","onClick","onChange","ref","dangerouslySetInnerHTML","__html","Component","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b02ff323.chunk.js","sourcesContent":["const Constants = {\r\n    ContainerClassName: \"container\",\r\n    EditorContainerClassName: \"editorContainer\",\r\n    EditorTextAreaClassName: \"editorTextArea\",\r\n    PriviewTextAreaClassName: \"previewTextArea\",\r\n    ToolBarContainerClassName: \"toolBarContainer\",\r\n    ToolBarElementClassName: \"toolBarElement\",\r\n    IconClassName:\"material-icons\"\r\n}\r\n\r\nexport default Constants;","import React from 'react';\r\nimport Constants from './constants';\r\nimport '../css/mdEditor.css';\r\n\r\nconst md = require('markdown-it')({\r\n    html: true,\r\n    linkify: true,\r\n    typographer: true,\r\n    breaks: true\r\n  });\r\nexport default class MdEditor extends React.Component\r\n{\r\n constructor(props){\r\n    super(props);\r\n    this.editorTextArea = React.createRef();\r\n    this.state = {\r\n        editorText:\"\",\r\n        previewText:\"\",\r\n        toolBarConfig: [\r\n            {\r\n                name: 'bold',\r\n                iconName: 'format_bold',\r\n                markUpStart: '**',\r\n                markUpEnd: '**',\r\n            },\r\n            {\r\n                name: 'italic',\r\n                iconName: 'format_italic',\r\n                markUpStart: '_',\r\n                markUpEnd: '_',\r\n            },\r\n            {\r\n                name: 'underlined',\r\n                iconName: 'format_underlined',\r\n                markUpStart: '<span style=\"text-decoration:underline\">',\r\n                markUpEnd: '</span>',\r\n            },\r\n            {\r\n                name: 'strikethrough',\r\n                iconName: 'strikethrough_s',\r\n                markUpStart: '~~',\r\n                markUpEnd: '~~',\r\n            },\r\n            {\r\n                name: 'quote',\r\n                iconName: 'format_quote',\r\n                markUpStart: '<blockquote>',\r\n                markUpEnd: '</blockquote>',\r\n            },\r\n            {\r\n                name: 'h1',\r\n                iconName: 'looks_one',\r\n                markUpStart: '# ',\r\n                isSingleTaggedMarkup: true\r\n            },\r\n            {\r\n                name: 'h2',\r\n                iconName: 'looks_two',\r\n                markUpStart: '## ',\r\n                isSingleTaggedMarkup: true\r\n            },\r\n            {\r\n                name: 'h3',\r\n                iconName: 'looks_3',\r\n                markUpStart: '### ',\r\n                isSingleTaggedMarkup: true\r\n            },\r\n            {\r\n                name: 'upperCase',\r\n                iconName: 'text_rotate_up',\r\n                customFormatter: function(input){\r\n                    return input ? input.toUpperCase() : '';\r\n                }\r\n            },\r\n            {\r\n                name: 'lowerCase',\r\n                iconName: 'text_rotation_down',\r\n                customFormatter: function(input){\r\n                    return input ? input.toLowerCase() : '';\r\n                }\r\n            },\r\n            {\r\n                name: 'code',\r\n                iconName: 'code',\r\n                markUpStart: '```',\r\n                markUpEnd: '```',\r\n                isBlockedMarkup: true\r\n            },\r\n            {\r\n                name: 'horizontalRule',\r\n                iconName: 'power_input',\r\n                markUpStart: '---',\r\n                isSingleTaggedMarkup: true\r\n            },\r\n        ]\r\n    };\r\n    this.editorTextChange = this.editorTextChange.bind(this);\r\n    this.handleToolBarElementClick = this.handleToolBarElementClick.bind(this);\r\n }\r\n\r\n editorTextChange(e){\r\n    this.setState(\r\n        {\r\n            editorText: e.target.value,\r\n            previewText: md.render(e.target.value)\r\n        }\r\n    );\r\n }\r\n\r\n\r\n handleToolBarElementClick(e, config){\r\n    const selectionStartIndex = this.editorTextArea.current.selectionStart;\r\n    const selectionEndIndex = this.editorTextArea.current.selectionEnd;\r\n\r\n    if(selectionStartIndex !== selectionEndIndex){\r\n        const currentText = this.state.editorText;\r\n        const selectedText = currentText.substring(selectionStartIndex , selectionEndIndex);\r\n        const newEditorText = this.addRemoveMarkup(selectedText, config, currentText, selectionStartIndex, selectionEndIndex);\r\n        const newPreviewText = md.render(newEditorText);\r\n        this.setState({\r\n            editorText:  newEditorText,\r\n            previewText: newPreviewText\r\n        })\r\n    }\r\n }\r\n\r\n addRemoveMarkup(text, config, editorText, selectionStart, selectionEnd){\r\n    let newText = '';\r\n    let newEditorText = '';\r\n    if(config.isSingleTaggedMarkup)\r\n    {\r\n        if(text.startsWith(config.markUpStart)){\r\n            newText = text.substring(config.markUpStart.length, text.length);\r\n            newEditorText = editorText.substring(0, selectionStart) + newText + editorText.substring(selectionStart + config.markUpStart.length + newText.length, editorText.length);\r\n        }\r\n        else{\r\n            newText = config.markUpStart + text;\r\n            newEditorText = editorText.substring(0, selectionStart) + newText + editorText.substring(selectionStart + newText.length, editorText.length);\r\n        }\r\n    }\r\n    else{\r\n        if(config.customFormatter){\r\n            newText = config.customFormatter(text);\r\n            newEditorText = editorText.substring(0, selectionStart) + newText +  editorText.substring(selectionStart + newText.length, editorText.length);\r\n        }\r\n        else{\r\n            if(text.startsWith(config.markUpStart) && text.endsWith(config.markUpEnd)){\r\n                newText = text.substring(config.markUpStart.length, text.length - config.markUpEnd.length);\r\n                newEditorText = editorText.substring(0, selectionStart) + newText + editorText.substring(selectionStart + config.markUpStart.length + newText.length + config.markUpEnd.length, editorText.length);\r\n            }\r\n            else\r\n            {\r\n                newText = config.markUpStart + text + config.markUpEnd;\r\n                newEditorText = editorText.substring(0, selectionStart) + newText + editorText.substring(selectionEnd, editorText.length);\r\n            }\r\n        }\r\n    }\r\n    return newEditorText;\r\n }\r\n\r\n render(){\r\n     return(\r\n         <div className= {Constants.ContainerClassName}>\r\n             <div className={Constants.EditorContainerClassName}>\r\n                <div className={Constants.ToolBarContainerClassName}>\r\n                    {\r\n                        this.state.toolBarConfig.map(config => {\r\n                            return(\r\n                                <div className={Constants.ToolBarElementClassName} key={config.name} onClick={(e)=>{ this.handleToolBarElementClick(e, config) }}>\r\n                                    <span className={Constants.IconClassName}>\r\n                                        {config.iconName}\r\n                                    </span>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <textarea className = {Constants.EditorTextAreaClassName}\r\n                        value = {this.state.editorText}\r\n                        onChange={this.editorTextChange}\r\n                        ref={this.editorTextArea}>\r\n                </textarea>\r\n             </div>\r\n             <div className= {Constants.PriviewTextAreaClassName} dangerouslySetInnerHTML={{__html:this.state.previewText}} ></div>\r\n         </div>\r\n     );\r\n }\r\n}","import MdEditor from './modules/mdEditor';\r\n\r\nexport default MdEditor;","import React from 'react';\nimport './App.css';\nimport MdEditor from './components/md-editor';\n\nfunction App() {\n  return (\n    <MdEditor/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}